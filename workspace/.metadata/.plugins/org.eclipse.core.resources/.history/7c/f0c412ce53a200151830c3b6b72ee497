package sfs2x.extensions.game;

import java.io.ByteArrayOutputStream;
import com.hp.hpl.jena.query.*;
import com.smartfoxserver.v2.entities.User;
import com.smartfoxserver.v2.entities.data.ISFSObject;
import com.smartfoxserver.v2.entities.data.SFSObject;
import com.smartfoxserver.v2.extensions.BaseClientRequestHandler;

public class SparqlHandler extends BaseClientRequestHandler{
	private String queryString;
	
	@Override
	public void handleClientRequest(User sender, ISFSObject params) {
		String type = params.getUtfString("type");
		if(type.equals("getCategories")) {
			this.queryString = 
					"PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>" +
			                "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>" +
			                "PREFIX owl: <http://www.w3.org/2002/07/owl#>" +
			                "SELECT * WHERE {" +
			                    "?link rdf:type owl:Class." +
			                    "?link rdfs:subClassOf ?subClass. " +
			                    "bind(strafter(str(?link),'http://dbpedia.org/ontology/') as ?linkName) " +
			                    "?link rdfs:label ?label ." +
			                    "FILTER (LANG(?label)='en')" +
			                    "optional{" +
				                    "?link rdf:type owl:Class." +
				                    "?link rdfs:comment ?description ." +
				                    "FILTER (LANG(?description)='en')" +
			                    "}" +
			                    "optional{" +
			                    	"?link rdf:type owl:Class. " +
			                    	"?link rdfs:subClassOf ?upperClass. " +
			                    	"FILTER (strstarts( str(?upperClass), 'http://dbpedia.org/ontology' ) ) " +
			                    	"?link rdfs:subClassOf/rdfs:label ?upperClassLabel " +
			                    	"FILTER (LANG(?upperClassLabel)='en')" +
			                    "}" +
				                    
			                "}";
		}
		else if(type.equals("getTopics")){
			String category = params.getUtfString("category");
			String level = params.getUtfString("level");
			String filter = null;
			switch (level) {
				case "Normal":
					filter = "?v > 5";
					break;
				case "Hard":
					filter = "?v >= 2 && ?v <= 5";
					break;
			}
			this.queryString = 
					"PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>"+
					"PREFIX dbo:<http://dbpedia.org/ontology/>"+
					"PREFIX vrank:<http://purl.org/voc/vrank#>"+
					"PREFIX dct:<http://purl.org/dc/terms/>"+
					"SELECT DISTINCT ?subject (COUNT(DISTINCT ?s) AS ?count) (SUM(DISTINCT ?v)/COUNT(DISTINCT ?s) AS ?popularity) "+
					"FROM <http://dbpedia.org> "+
					"FROM <http://people.aifb.kit.edu/ath/#DBpedia_PageRank> "+
					"WHERE { "+
					"?s dct:subject ?subject. "+
					"?s rdf:type ?type. "+
					"filter (strstarts( str(?type), 'http://dbpedia.org/class/yago/" + category +"1' ) || strstarts( str(?type), 'http://dbpedia.org/ontology/" + category +"' )) "+
					"?s vrank:hasRank/vrank:rankValue ?v. "+
					"FILTER(" + filter + ") "+
					"} "+
					"GROUP BY ?subject "+
					"HAVING (COUNT(DISTINCT ?s) > 7) "+
					"ORDER BY DESC(?popularity) "+
					"LIMIT 500";
		}
		else if(type.equals("getEntries")){
			String category = params.getUtfString("category");
			String level = params.getUtfString("level");
			String uri = params.getUtfString("uri");
			String filter = null;
			switch (level) {
				case "Normal":
					filter = "?v > 5";
					break;
				case "Hard":
					filter = "?v >= 2 && ?v <= 5";
					break;
			}
			this.queryString = 
				"PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#>"+
				"PREFIX dbo:<http://dbpedia.org/ontology/>"+
				"PREFIX vrank:<http://purl.org/voc/vrank#>"+
				"PREFIX dct:<http://purl.org/dc/terms/>"+
				"PREFIX rdfs:<http://www.w3.org/2000/01/rdf-schema#>"+
				"PREFIX foaf:<http://xmlns.com/foaf/0.1/>"+
				"SELECT DISTINCT ?uri ?name ?website "+
				"FROM <http://dbpedia.org> "+
				"FROM <http://people.aifb.kit.edu/ath/#DBpedia_PageRank> "+
				"WHERE { "+
				"?uri dct:subject <" + uri +">. "+
				"?uri rdfs:label ?name "+
				"filter langMatches( lang(?name), 'EN' )" +
				"?uri foaf:isPrimaryTopicOf ?website ." +
				"?uri rdf:type ?type. " +
				"filter (strstarts( str(?type), 'http://dbpedia.org/class/yago/" + category + "1' ) || strstarts( str(?type), 'http://dbpedia.org/ontology/" + category + "' )) "+
				"?uri vrank:hasRank/vrank:rankValue ?v. "+
				"FILTER(" + filter + ") "+
				"} ";
		}
		
		
		String data = executeQuery();
		ISFSObject resObj = SFSObject.newInstance(); 
        resObj.putUtfString("data", data);
        resObj.putSFSObject("params", params);
        send(type, resObj, sender);
			
	}
	
	public String executeQuery()
    {
		String endpoint = "http://dbpedia.org/sparql?default-graph-uri=http%3A%2F%2Fdbpedia.org"; 
		Query query = QueryFactory.create(queryString);
		QueryExecution qexec = QueryExecutionFactory.sparqlService(endpoint, query);
		try {
			ResultSet results = qexec.execSelect();
			ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
			ResultSetFormatter.outputAsJSON(outputStream, results);
			String data = new String(outputStream.toByteArray());
			qexec.close();	
			return data;
		} catch (Exception e) {
			trace(e);
			qexec.close();
			return "";
		}
	    
    }
	
	
}