package sfs2x.extensions.room.play;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;

import com.smartfoxserver.v2.entities.Room;
import com.smartfoxserver.v2.entities.User;
import com.smartfoxserver.v2.entities.data.ISFSObject;
import com.smartfoxserver.v2.entities.data.SFSObject;
import com.smartfoxserver.v2.extensions.SFSExtension;

public class RoomExtension extends SFSExtension
{
	private ArrayList<String[]> settings;
	private EduGameBoard gameBoard;
	
	private User whoseTurn;
	private volatile boolean gameStarted;
	private LastGameEndResponse lastGameEndResponse;
	
	private final String version = "1.0.5";
	
	public static void main(String[] args) {
	}

	@Override
	public void init() {
		trace("Tris game Extension for SFS2X started, rel. " + version);
		setSettings(new ArrayList<String[]>(3));
		addRequestHandler("ready", ReadyHandler.class);		
		addRequestHandler("pickCard", PickCardHandler.class);	
	}
	
	Room getGameRoom()
	{
		return this.getParentRoom();
	}
    
    LastGameEndResponse getLastGameEndResponse()
    {
	    return lastGameEndResponse;
    }
    
    void initGame() throws IOException
	{
    	if (gameStarted)
			throw new IllegalStateException("Game is already started!");
		
		lastGameEndResponse = null;
		gameStarted = true;

		User player1 = getParentRoom().getUserByPlayerId(1);
		User player2 = getParentRoom().getUserByPlayerId(2);
		gameBoard = new EduGameBoard(24, settings, player1, player2);
		//gameBoard.generateResourceList();
		//gameBoard.generateCardList();
		gameBoard.generateTestDataset(player1.getId(), player2.getId());
		String json = gameBoard.getAllCards();

		// No turn assigned? Let's start with player 1
		if (whoseTurn == null)
			whoseTurn = player1;
		
		// Send START event to client
		ISFSObject resObj = new SFSObject();
		resObj.putUtfString("cardData", json);
		resObj.putInt("t", whoseTurn.getPlayerId());
		resObj.putUtfString("p1n", player1.getName());
		resObj.putUtfString("p2n", player2.getName());
		resObj.putInt("p1i", player1.getId());
		resObj.putInt("p2i", player2.getId());
		resObj.putIntArray("layouts", defineCardsBackground());
		
		send("init", resObj, getParentRoom().getUserList());
	}
    
    public ArrayList<Integer> defineCardsBackground() {
    	ArrayList<Integer> layouts = new ArrayList<Integer>();
		ArrayList<Integer> list = new ArrayList<Integer>();
        for (int i=1; i < 7; i++) { //we have 6 different layouts for background of cards
            list.add(new Integer(i));
        }
        Collections.shuffle(list); //shuffle the layouts
        for (int i=0; i < 3; i++) { //get first 3 layouts
            int index = list.get(i);
            layouts.add(index);
        }
        return layouts;
	}

    
	public ArrayList<String[]> getSettings() {
		return settings;
	}
	public void setSettings(ArrayList<String[]> settings) {
		this.settings = settings;
	}
	public EduGameBoard getGameBoard() {
		return gameBoard;
	}
	public void setGameBoard(EduGameBoard gameBoard) {
		this.gameBoard = gameBoard;
	}

}
